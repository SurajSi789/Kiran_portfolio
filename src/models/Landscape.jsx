import { a } from "@react-spring/three";
import { useEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";

import landscapeScene from "../assets/3d/land.glb";

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

const Landscape = ({
    isRotating,
  setIsRotating,
  setCurrentStage,
  currentFocusPoint,
  ...props}
) => {
    const islandRef = useRef();
    const { gl, viewport } = useThree();
    const { nodes, materials } = useGLTF(landscapeScene)

        // Use a ref for the last mouse x position
    const lastX = useRef(0);
    // Use a ref for rotation speed
    const rotationSpeed = useRef(0);
    // Define a damping factor to control rotation damping
    const dampingFactor = 0.95;

    // Handle pointer (mouse or touch) down event
    const handlePointerDown = (event) => {
        event.stopPropagation();
        event.preventDefault();
        setIsRotating(true);

        // Calculate the clientX based on whether it's a touch event or a mouse event
        const clientX = event.touches ? event.touches[0].clientX : event.clientX;

        // Store the current clientX position for reference
        lastX.current = clientX;
    };

    // Handle pointer (mouse or touch) up event
    const handlePointerUp = (event) => {
        event.stopPropagation();
        event.preventDefault();
        setIsRotating(false);
    };

    // Handle pointer (mouse or touch) move event
    const handlePointerMove = (event) => {
        event.stopPropagation();
        event.preventDefault();
        if (isRotating) {
        // If rotation is enabled, calculate the change in clientX position
        const clientX = event.touches ? event.touches[0].clientX : event.clientX;

        // calculate the change in the horizontal position of the mouse cursor or touch input,
        // relative to the viewport's width
        const delta = (clientX - lastX.current) / viewport.width;

        // Update the island's rotation based on the mouse/touch movement
        islandRef.current.rotation.y += delta * 0.01 * Math.PI;

        // Update the reference for the last clientX position
        lastX.current = clientX;

        // Update the rotation speed
        rotationSpeed.current = delta * 0.01 * Math.PI;
        }
    };

    // Handle keydown events
    const handleKeyDown = (event) => {
        if (event.key === "ArrowLeft") {
        if (!isRotating) setIsRotating(true);

        islandRef.current.rotation.y += 0.005 * Math.PI;
        rotationSpeed.current = 0.007;
        } else if (event.key === "ArrowRight") {
        if (!isRotating) setIsRotating(true);

        islandRef.current.rotation.y -= 0.005 * Math.PI;
        rotationSpeed.current = -0.007;
        }
    };

    // Handle keyup events
    const handleKeyUp = (event) => {
        if (event.key === "ArrowLeft" || event.key === "ArrowRight") {
        setIsRotating(false);
        }
    };

    // Touch events for mobile devices
    const handleTouchStart = (e) => {
        e.stopPropagation();
        e.preventDefault();
        setIsRotating(true);
    
        const clientX = e.touches ? e.touches[0].clientX : e.clientX;
        lastX.current = clientX;
    }
    
    const handleTouchEnd = (e) => {
        e.stopPropagation();
        e.preventDefault();
        setIsRotating(false);
    }
    
    const handleTouchMove = (e) => {
        e.stopPropagation();
        e.preventDefault();
    
        if (isRotating) {
        const clientX = e.touches ? e.touches[0].clientX : e.clientX;
        const delta = (clientX - lastX.current) / viewport.width;
    
        islandRef.current.rotation.y += delta * 0.01 * Math.PI;
        lastX.current = clientX;
        rotationSpeed.current = delta * 0.01 * Math.PI;
        }
    }

    useEffect(() => {
        // Add event listeners for pointer and keyboard events
        const canvas = gl.domElement;
        canvas.addEventListener("pointerdown", handlePointerDown);
        canvas.addEventListener("pointerup", handlePointerUp);
        canvas.addEventListener("pointermove", handlePointerMove);
        window.addEventListener("keydown", handleKeyDown);
        window.addEventListener("keyup", handleKeyUp);
        canvas.addEventListener("touchstart", handleTouchStart);
        canvas.addEventListener("touchend", handleTouchEnd);
        canvas.addEventListener("touchmove", handleTouchMove);

        // Remove event listeners when component unmounts
        return () => {
        canvas.removeEventListener("pointerdown", handlePointerDown);
        canvas.removeEventListener("pointerup", handlePointerUp);
        canvas.removeEventListener("pointermove", handlePointerMove);
        window.removeEventListener("keydown", handleKeyDown);
        window.removeEventListener("keyup", handleKeyUp);
        canvas.removeEventListener("touchstart", handleTouchStart);
        canvas.removeEventListener("touchend", handleTouchEnd);
        canvas.removeEventListener("touchmove", handleTouchMove);
        };
    }, [gl, handlePointerDown, handlePointerUp, handlePointerMove]);

    // This function is called on each frame update
    useFrame(() => {
        // If not rotating, apply damping to slow down the rotation (smoothly)
        if (!isRotating) {
        // Apply damping factor
        rotationSpeed.current *= dampingFactor;

        // Stop rotation when speed is very small
        if (Math.abs(rotationSpeed.current) < 0.001) {
            rotationSpeed.current = 0;
        }

        islandRef.current.rotation.y += rotationSpeed.current;
        } else {
        // When rotating, determine the current stage based on island's orientation
        const rotation = islandRef.current.rotation.y;

        /**
         * Normalize the rotation value to ensure it stays within the range [0, 2 * Math.PI].
         * The goal is to ensure that the rotation value remains within a specific range to
         * prevent potential issues with very large or negative rotation values.
         *  Here's a step-by-step explanation of what this code does:
         *  1. rotation % (2 * Math.PI) calculates the remainder of the rotation value when divided
         *     by 2 * Math.PI. This essentially wraps the rotation value around once it reaches a
         *     full circle (360 degrees) so that it stays within the range of 0 to 2 * Math.PI.
         *  2. (rotation % (2 * Math.PI)) + 2 * Math.PI adds 2 * Math.PI to the result from step 1.
         *     This is done to ensure that the value remains positive and within the range of
         *     0 to 2 * Math.PI even if it was negative after the modulo operation in step 1.
         *  3. Finally, ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI) applies another
         *     modulo operation to the value obtained in step 2. This step guarantees that the value
         *     always stays within the range of 0 to 2 * Math.PI, which is equivalent to a full
         *     circle in radians.
         */
        const normalizedRotation =
            ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

        // Set the current stage based on the island's orientation
        switch (true) {
            case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
            setCurrentStage(4);
            break;
            case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
            setCurrentStage(3);
            break;
            case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
            setCurrentStage(2);
            break;
            case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
            setCurrentStage(1);
            break;
            default:
            setCurrentStage(null);
        }
        }
    });

    return (
        <a.group ref={islandRef} {...props}>
        <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube.geometry}
        material={materials['Material.026']}
        position={[0.58, 8.056, 0.159]}
        rotation={[0, 1.392, 0]}
        scale={0.048}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube001.geometry}
        material={materials['Material.004']}
        position={[0.735, 8.108, 0.163]}
        rotation={[-Math.PI, 0.38, -Math.PI]}
        scale={[0.052, 0.007, 0.02]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube002.geometry}
        material={materials['Material.006']}
        position={[0.001, 8.179, -0.522]}
        rotation={[0, -0.179, -Math.PI]}
        scale={[-0.261, -0.101, -0.184]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube003.geometry}
        material={nodes.Cube003.material}
        position={[0.261, 8.39, -0.477]}
        rotation={[0, -0.179, -Math.PI]}
        scale={[-0.004, -0.037, -0.028]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube004.geometry}
        material={materials['Material.008']}
        position={[0.258, 8.39, -0.477]}
        rotation={[-Math.PI, 0.179, -Math.PI]}
        scale={[0.001, 0.026, 0.019]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube005.geometry}
        material={nodes.Cube005.material}
        position={[0.261, 8.185, -0.477]}
        rotation={[0, -0.179, -Math.PI]}
        scale={[-0.004, -0.037, -0.028]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube006.geometry}
        material={materials['Material.008']}
        position={[0.258, 8.185, -0.477]}
        rotation={[-Math.PI, 0.179, -Math.PI]}
        scale={[0.001, 0.026, 0.019]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube007.geometry}
        material={nodes.Cube007.material}
        position={[0.166, 8.388, -0.301]}
        rotation={[Math.PI, -1.392, 0]}
        scale={[-0.004, -0.037, -0.028]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube008.geometry}
        material={materials['Material.008']}
        position={[0.166, 8.388, -0.304]}
        rotation={[0, 1.392, 0]}
        scale={[0.001, 0.026, 0.019]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube009.geometry}
        material={nodes.Cube009.material}
        position={[-0.224, 8.388, -0.372]}
        rotation={[Math.PI, -1.392, 0]}
        scale={[-0.004, -0.037, -0.028]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube010.geometry}
        material={materials['Material.008']}
        position={[-0.223, 8.388, -0.375]}
        rotation={[0, 1.392, 0]}
        scale={[0.001, 0.026, 0.019]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube011.geometry}
        material={materials['Material.005']}
        position={[-0.047, 8.251, -0.258]}
        rotation={[-2.77, 0.167, 3.077]}
        scale={[0.09, 0.004, 0.093]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube013.geometry}
        material={materials['Material.007']}
        position={[0.018, 8.552, -0.616]}
        rotation={[-0.688, -0.139, -0.113]}
        scale={[0.279, 0.005, 0.131]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube014.geometry}
        material={materials['Material.006']}
        position={[0.002, 8.609, -0.521]}
        rotation={[-Math.PI, 0.179, -Math.PI]}
        scale={[0.192, 0.114, 0.153]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube016.geometry}
        material={materials['Material.007']}
        position={[-0.095, 8.781, -0.538]}
        rotation={[-1.289, 0.995, 1.238]}
        scale={[0.166, 0.004, 0.119]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube017.geometry}
        material={materials['Material.006']}
        position={[0.003, 8.568, -0.298]}
        rotation={[-Math.PI, 0.179, -Math.PI]}
        scale={[0.122, 0.005, 0.059]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube018.geometry}
        material={nodes.Cube018.material}
        position={[-0.038, 8.633, -0.37]}
        rotation={[Math.PI, -1.392, 0]}
        scale={[-0.004, -0.037, -0.028]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube019.geometry}
        material={materials['Material.008']}
        position={[-0.038, 8.633, -0.373]}
        rotation={[0, 1.392, 0]}
        scale={[0.001, 0.026, 0.019]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube020.geometry}
        material={materials['Material.006']}
        position={[-0.213, 8.681, -0.412]}
        rotation={[-Math.PI, 0.179, -Math.PI]}
        scale={[0.039, 0.199, 0.039]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube021.geometry}
        material={materials['Material.009']}
        position={[0.001, 8.609, -0.517]}
        rotation={[-Math.PI, 0.179, -Math.PI]}
        scale={[0.192, 0.114, 0.153]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube022.geometry}
        material={materials['Material.009']}
        position={[0.001, 8.179, -0.52]}
        rotation={[0, -0.179, -Math.PI]}
        scale={[-0.261, -0.101, -0.184]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder.geometry}
        material={materials['Material.023']}
        position={[1.407, 8.329, 0.897]}
        rotation={[0, 1.392, 0]}
        scale={0.124}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder001.geometry}
        material={materials['Material.013']}
        position={[1.407, 8.329, 0.897]}
        rotation={[0, 1.392, 0]}
        scale={0.129}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder002.geometry}
        material={materials['Material.014']}
        position={[1.65, 8.333, 1.148]}
        rotation={[-Math.PI, 1.09, -Math.PI]}
        scale={0.124}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder003.geometry}
        material={materials['Material.012']}
        position={[1.65, 8.333, 1.148]}
        rotation={[-Math.PI, 1.09, -Math.PI]}
        scale={0.131}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder004.geometry}
        material={materials['Material.017']}
        position={[-0.007, 8.269, 0.593]}
        rotation={[-Math.PI, 1.09, -Math.PI]}
        scale={0.124}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder005.geometry}
        material={materials['Material.012']}
        position={[-0.007, 8.269, 0.593]}
        rotation={[-Math.PI, 1.09, -Math.PI]}
        scale={0.128}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder006.geometry}
        material={materials['Material.021']}
        position={[-0.359, 8.269, 0.227]}
        rotation={[Math.PI, -0.249, Math.PI]}
        scale={0.124}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder007.geometry}
        material={materials['Material.013']}
        position={[-0.359, 8.269, 0.227]}
        rotation={[Math.PI, -0.249, Math.PI]}
        scale={0.129}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder008.geometry}
        material={materials['Material.022']}
        position={[-0.545, 8.226, -0.14]}
        rotation={[Math.PI, -0.821, Math.PI]}
        scale={0.1}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder009.geometry}
        material={materials['Material.012']}
        position={[-0.545, 8.226, -0.14]}
        rotation={[Math.PI, -0.821, Math.PI]}
        scale={0.104}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder010.geometry}
        material={materials['Material.016']}
        position={[-0.524, 8.269, -0.259]}
        rotation={[Math.PI, -1.204, Math.PI]}
        scale={0.146}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder011.geometry}
        material={materials['Material.013']}
        position={[-0.524, 8.269, -0.259]}
        rotation={[Math.PI, -1.204, Math.PI]}
        scale={0.151}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder016.geometry}
        material={materials['Material.018']}
        position={[0.782, 8.269, -0.412]}
        rotation={[0, -0.5, 0]}
        scale={0.115}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder017.geometry}
        material={materials['Material.011']}
        position={[0.782, 8.269, -0.412]}
        rotation={[0, -0.5, 0]}
        scale={0.117}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder018.geometry}
        material={materials['Material.015']}
        position={[0.578, 8.269, -0.669]}
        rotation={[-Math.PI, 1.226, -Math.PI]}
        scale={0.115}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder019.geometry}
        material={materials['Material.010']}
        position={[0.578, 8.269, -0.669]}
        rotation={[-Math.PI, 1.226, -Math.PI]}
        scale={0.118}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder020.geometry}
        material={materials['Material.024']}
        position={[-1.713, 8.039, -0.514]}
        rotation={[Math.PI, -0.249, Math.PI]}
        scale={0.124}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder021.geometry}
        material={materials['Material.013']}
        position={[-1.713, 8.039, -0.514]}
        rotation={[Math.PI, -0.249, Math.PI]}
        scale={0.129}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder022.geometry}
        material={materials['Material.025']}
        position={[-2.08, 8.039, -0.429]}
        rotation={[Math.PI, -0.249, Math.PI]}
        scale={0.124}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder023.geometry}
        material={materials['Material.013']}
        position={[-2.08, 8.039, -0.429]}
        rotation={[Math.PI, -0.249, Math.PI]}
        scale={0.129}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Icosphere.geometry}
        material={materials['Material.005']}
        position={[0.157, 7.859, -0.171]}
        rotation={[0, 1.392, 0]}
        scale={[1.209, 0.445, 1.209]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Icosphere001.geometry}
        material={materials['Material.005']}
        position={[1.597, 8.109, 0.945]}
        rotation={[Math.PI, -0.769, Math.PI]}
        scale={[0.435, 0.305, 0.435]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Icosphere002.geometry}
        material={materials['Material.004']}
        position={[-1.895, 7.808, -0.556]}
        rotation={[Math.PI, -0.541, Math.PI]}
        scale={[0.435, 0.305, 0.435]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Icosphere003.geometry}
        material={materials['Material.002']}
        position={[0.508, 8.555, 0.151]}
        rotation={[-3.1, -0.719, -3.092]}
        scale={0.104}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Icosphere004.geometry}
        material={materials['Material.004']}
        position={[1.32, 8.256, -1.905]}
        rotation={[Math.PI, -0.541, Math.PI]}
        scale={[0.435, 0.305, 0.435]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Icosphere005.geometry}
        material={materials['Material.001']}
        position={[0.157, 7.865, -0.171]}
        rotation={[0, 1.392, 0]}
        scale={[1.209, 0.445, 1.209]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Icosphere006.geometry}
        material={materials['Material.002']}
        position={[1.597, 8.113, 0.945]}
        rotation={[Math.PI, -0.769, Math.PI]}
        scale={[0.435, 0.305, 0.435]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Icosphere007.geometry}
        material={materials['Material.002']}
        position={[-1.895, 7.814, -0.556]}
        rotation={[Math.PI, -0.541, Math.PI]}
        scale={[0.435, 0.305, 0.435]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Icosphere008.geometry}
        material={materials['Material.002']}
        position={[1.32, 8.259, -1.905]}
        rotation={[Math.PI, -0.541, Math.PI]}
        scale={[0.435, 0.305, 0.435]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Icosphere009.geometry}
        material={nodes.Icosphere009.material}
        position={[-1.665, 6.74, -1.13]}
        rotation={[0, 1.392, 0]}
        scale={0.245}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Icosphere010.geometry}
        material={nodes.Icosphere010.material}
        position={[1.392, 6.74, -1.482]}
        rotation={[-Math.PI, 0.835, -Math.PI]}
        scale={0.245}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Icosphere011.geometry}
        material={nodes.Icosphere011.material}
        position={[1.593, 6.698, 0.961]}
        rotation={[-Math.PI, 1.507, -Math.PI]}
        scale={0.245}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Icosphere012.geometry}
        material={nodes.Icosphere012.material}
        position={[1.49, 7.339, 0.896]}
        rotation={[-Math.PI, 1.507, -Math.PI]}
        scale={0.139}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Icosphere013.geometry}
        material={nodes.Icosphere013.material}
        position={[-0.523, 6.225, -0.829]}
        rotation={[-Math.PI, 1.507, -Math.PI]}
        scale={0.299}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Torus040.geometry}
        material={materials['Material.003']}
        position={[0.777, 8.122, 0.179]}
        rotation={[Math.PI / 2, 0, 1.951]}
        scale={[0.004, 0.005, 0.01]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Door.geometry}
        material={materials['Door.001']}
        position={[-0.023, 8.127, -0.209]}
        rotation={[0, -0.177, 0]}
        scale={[0.047, 0.043, 0.043]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Handle01.geometry}
          material={materials['Frame.001']}>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Frame001.geometry}
                material={materials['Frame.001']}
            />
        </mesh>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Handle02.geometry}
          material={materials['Frame.001']}
          rotation={[0, 0, -Math.PI]}
          scale={-1}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Frame.geometry}
            material={materials['Frame.001']}
            position={[0, 0, 0.001]}
          />
        </mesh>
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Door001.geometry}
        material={materials['Door.001']}
        position={[0.114, 8.632, -0.344]}
        rotation={[0, -0.177, 0]}
        scale={[0.047, 0.052, 0.043]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Handle01001.geometry}
          material={materials['Frame.001']}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Frame002.geometry}
            material={materials['Frame.001']}
          />
        </mesh>
      </mesh>
        </a.group>
    )
}

export default Landscape
